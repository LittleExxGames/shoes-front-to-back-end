AWSTemplateFormatVersion: '2010-09-09'
Description: VPC
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    Public1:
      CIDR: 10.0.0.0/19
    Public2:
      CIDR: 10.0.32.0/19
    Private1:
      CIDR: 10.0.64.0/19
    Private2:
      CIDR: 10.0.96.0/19
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - VPC
        - CIDR
      Tags:
      - Key: Name
        Value:
          Fn::Sub: VPC-${AWS::StackName}
  VPCInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: VPC Internet Gateway ${AWS::StackName}
  VPCInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: VPCInternetGateway
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs:
            Ref: AWS::Region
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Public1
        - CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: Public Subnet 1 ${AWS::StackName}
  PublicSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: Public Subnet 1 Route Table ${AWS::StackName}
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicSubnet1RouteTable
      SubnetId:
        Ref: PublicSubnet1
  PublicSubnet1DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicSubnet1RouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: VPCInternetGateway
    DependsOn:
    - VPC
  PublicSubnet1EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  PublicSubnet1NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - PublicSubnet1EIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnet1
      Tags:
      - Key: Name
        Value:
          Fn::Sub: Public Subnet 1 Nat Gateway ${AWS::StackName}
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs:
            Ref: AWS::Region
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Public2
        - CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: Public Subnet 2 ${AWS::StackName}
  PublicSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: Public Subnet 2 Route Table ${AWS::StackName}
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicSubnet2RouteTable
      SubnetId:
        Ref: PublicSubnet2
  PublicSubnet2DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicSubnet2RouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: VPCInternetGateway
    DependsOn:
    - VPC
  PublicSubnet2EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  PublicSubnet2NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - PublicSubnet2EIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnet2
      Tags:
      - Key: Name
        Value:
          Fn::Sub: Public Subnet 2 Nat Gateway ${AWS::StackName}
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs:
            Ref: AWS::Region
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Private1
        - CIDR
      Tags:
      - Key: Name
        Value:
          Fn::Sub: Subnet-One ${AWS::StackName}
  Private1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: rt-1
  Private1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: Private1RouteTable
      SubnetId:
        Ref: PrivateSubnet1
  PrivateSubnet1DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: Private1RouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId:
        Ref: PublicSubnet1NatGateway
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs:
            Ref: AWS::Region
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Private2
        - CIDR
      Tags:
      - Key: Name
        Value:
          Fn::Sub: Subnet-Two ${AWS::StackName}
  Private2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: rt-2 ${AWS::StackName}
  Private2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: Private2RouteTable
      SubnetId:
        Ref: PrivateSubnet2
  PrivateSubnet2DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: Private2RouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId:
        Ref: PublicSubnet2NatGateway
  PublicLoadBalancer:
    DependsOn: VPCInternetGateway
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - Ref: PublicHTTPSecurityGroup
      Subnets:
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
      Type: application
  PublicLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      VpcId:
        Ref: VPC
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 0
      Port: 3001
      TargetType: ip
      IpAddressType: ipv4
  PublicLBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: PublicLBTargetGroup
      LoadBalancerArn:
        Ref: PublicLoadBalancer
      Port: 80
      Protocol: HTTP
  PublicHTTPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: HTTP access to the public facing load balancer
      SecurityGroupEgress:
      - CidrIp: '0.0.0.0/0'
        Description: Allow all outbound traffic by default
        IpProtocol: '-1'
      SecurityGroupIngress:
      - CidrIp: '0.0.0.0/0'
        Description: Allow traffic from services on port 3001
        FromPort: 3001
        IpProtocol: tcp
        ToPort: 3001
      VpcId:
        Ref: VPC
  ApplicationLBSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow from anyone on port 80
      IpProtocol: tcp
      CidrIp: '0.0.0.0/0'
      FromPort: 80
      ToPort: 80
      GroupId:
        Ref: PublicHTTPSecurityGroup
Outputs:
  PublicLBFQDN:
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - PublicLoadBalancer
          - DNSName
        - /
  VPCID:
    Value:
      Ref: VPC
  PublicSubnet1:
    Value:
      Ref: PublicSubnet1
  PublicSubnet2:
    Value:
      Ref: PublicSubnet2
  PrivateSubnet1:
    Value:
      Ref: PrivateSubnet1
  PrivateSubnet2:
    Value:
      Ref: PrivateSubnet2
  LB:
    Value:
      Ref: PublicLBTargetGroup
  SG:
    Value:
      Ref: PublicHTTPSecurityGroup
